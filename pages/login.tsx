import { API_BASE_URL, TOKEN_OBTAIN_ENDPOINT } from '@/lib/constants';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useState } from 'react';
import Cookies from 'js-cookie';

export default function Login() {
  const router = useRouter();
  
  const [credentials, setCredentials] = useState({
    email: "",
    password: ""
  });

  const [loginError, setLoginError] = useState(false);
  const [fetchError, setFetchError] = useState(false);
  const [serverError, setServerError] = useState(false);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setCredentials((prevState) => ({
      ...prevState,
      [name]: value,
    }));
    // Reset login error state when user types into input field
    setLoginError(false);
  };

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    let response;

    try {
      response = await fetch(`${API_BASE_URL}/${TOKEN_OBTAIN_ENDPOINT}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ username: credentials.email, password: credentials.password })
      });
    } catch (error) {
      setFetchError(true); // TODO: display error in DOM
      return;
    }

    if (response.status == 401) {
      setLoginError(true);
    } else if (!response.ok) {
      setServerError(true); // TODO: display error in DOM
    } else {
      const data = await response.json();

      Cookies.set('accessToken', data.access);
      Cookies.set('refreshToken', data.refresh);

      router.push('/');
    }
  };

  return (<>
    <Head>
      <title>Create Next App</title>
      <meta name="description" content="Generated by create next app" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <main>
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="email">Email</label>
          <input
            type="email"
            name="email"
            value={credentials.email}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label htmlFor="password">Password</label>
          <input
            type="password"
            name="password"
            value={credentials.password}
            onChange={handleInputChange}
          />
        </div>
        {loginError && (<div>Incorrect email or password. Please try again.</div>)}
        <button type="submit">Login</button>
      </form>
    </main>
  </>);
};